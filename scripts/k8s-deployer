#!/bin/bash

set -euo pipefail

BASE=$(basename "${BASH_SOURCE[0]}")
ERRORS=()
ERROR_MARK=none

command=
cluster_name=

trap exit_handler EXIT

usage() {
  cat <<EOF
$BASE is all-in-one Kubernetes deployer

Usage:
  $BASE [-h] [-v] [command] CLUSTER_NAME

Available Commands:
  diff        : Show a diff explaining what the next deployment would change within the current deployment
  apply       : Apply all deployments only when there are changes

Available Options:
  --verbose         : enable script verbose output
  -h, --help        : show this message
EOF

exit
}

msg() {
  echo -e "$*" >&2
}

die() {
  local msg=$1
  msg "$BASE: $msg"
  return 64
}

# shellcheck disable=SC2034
setup_colors() {
  # if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
  # disable checking file descriptor (fd) since terrascript intended to be run on docker environment
  if [[ -z "${NO_COLOR-}" ]]; then
    NC='\033[0m'
    WHITE='\033[1;97m'
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    LGREEN='\033[1;92m'
    ORANGE='\033[0;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    YELLOW='\033[1;33m'
    LYELLOW='\033[1;93m'
  else
    NC=''
    WHITE=''
    RED=''
    GREEN=''
    LGREEN=''
    ORANGE=''
    BLUE=''
    PURPLE=''
    CYAN=''
    YELLOW=''
    LYELLOW=''
  fi
}

exit_handler() {
  RC=$?
  trap - EXIT

  case $ERROR_MARK in
    dependency)
      for e in "${ERRORS[@]}"; do
        msg "$BASE: missing ${RED}${e##*/}${NC} command"
      done
    ;;
    cluster-not-found)
      for e in "${ERRORS[@]}"; do
        msg "$BASE: cluster '${YELLOW}${e##*/}${NC}' not found"
      done
    ;;
    cluster-required)
      msg "$BASE: cluster required"
    ;;
  esac
  exit $RC
}

command_check() {
  for cmd in "$@"; do
    if type "${cmd}" >/dev/null 2>&1 || [[ -x "${cmd}" ]]; then
      continue
    fi
    ERRORS+=("${cmd}")
  done

  if [ ${#ERRORS[@]} -ne 0 ]; then
    export ERROR_MARK=dependency
    return 69
  fi
}

parse_options() {
  if [[ $# -eq 0 ]]; then
    usage
  fi

  while [[ $# -gt 0 ]]; do
    case $1 in
      -h | --help) usage ;;
      -v | --verbose) set -x ;;
      -nc | --no-color) NO_COLOR=1 ;;
      -?*) die "unknown option '$1'" ;;
      *) break ;;
    esac
    shift
  done

  command=${1:-}
  cluster_name=${2:-}
}

init() {
  [[ -z "${cluster_name:-}" ]] && {
    ERROR_MARK="cluster-required"
    return 99
  }

  [[ -d "./clusters/$cluster_name" ]] || {
    ERROR_MARK="cluster-not-found"
    ERRORS=("$cluster_name")
    return 99
  }
}

diff() {
  init

  msg "k8s-deployer: Start to diff the deployment with current deployment"

  shopt -s nullglob
  for dir in ./clusters/"${cluster_name}"/*; do
    case $dir in
      *-kustomize)
        if [[ $(find "$dir" -type f -name "kustomization.yaml" -printf x | wc --chars) -eq 0 ]]; then
          msg "${CYAN}Skipping Kustomize ...${NC}"
          continue
        fi

        msg "${BLUE}Diffing Kustomize ...${NC}"
        kustomize build "${dir}" | kubectl apply -f - --dry-run=server || true
      ;;
      *-releases)
        if [[ $(find "$dir" -type f -name "release.yaml" -printf x | wc --chars) -eq 0 ]]; then
          msg "${CYAN}Skipping Helm Release ...${NC}"
          continue
        fi

        msg "${BLUE}Diffing Helm Release ...${NC}"
        helmfile -f "${dir}/release.yaml" diff --skip-diff-on-install || true
      ;;
      *-manifests)
        if [[ $(find "$dir" -type f -name "*.yaml" -printf x | wc --chars) -eq 0 ]]; then
          msg "${CYAN}Skipping Manifests ...${NC}"
          continue
        fi

        msg "${BLUE}Diffing Manifests ...${NC}"
        kubectl apply -R --dry-run=server -f "${dir}" || true
      ;;
    esac
  done
  shopt -u nullglob

  msg "k8s-deployer: End of diffing the deployment with current deployment"
}

apply() {
  init

  msg "k8s-deployer: Start to apply the deployment"

  shopt -s nullglob
  for dir in ./clusters/"${cluster_name}"/*; do
    case $dir in
      *-kustomize)
        if [[ $(find "$dir" -type f -name "kustomization.yaml" -printf x | wc --chars) -eq 0 ]]; then
          msg "${CYAN}Skipping Kustomize ...${NC}"
          continue
        fi

        msg "${BLUE}Applying Kustomize ...${NC}"
        kustomize build "${dir}" | kubectl apply -f - || true
      ;;
      *-releases)
        if [[ $(find "$dir" -type f -name "release.yaml" -printf x | wc --chars) -eq 0 ]]; then
          msg "${CYAN}Skipping Helm Release ...${NC}"
          continue
        fi

        msg "${BLUE}Applying Helm Release ...${NC}"
        helmfile -f "${dir}/release.yaml" apply --skip-diff-on-install || true
      ;;
      *-manifests)
        if [[ $(find "$dir" -type f -name "*.yaml" -printf x | wc --chars) -eq 0 ]]; then
          msg "${CYAN}Skipping Manifests ...${NC}"
          continue
        fi

        msg "${BLUE}Applying Manifests ...${NC}"
        kubectl apply -R -f "${dir}" || true
      ;;
    esac
  done
  shopt -u nullglob
  msg "k8s-deployer: End of applying the deployment"
}

main() {
  setup_colors
  command_check "kubectl" "kustomize" "helmfile" "helm"

  parse_options "$@"

  case $command in
    diff)
      diff "$cluster_name"
    ;;

    apply)
      apply "$cluster_name"
    ;;

    *) die "unknown command '$1'" ;;
  esac
}

main "$@"